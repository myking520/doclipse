/* DoclipseParser.java */
/* Generated By:JavaCC: Do not edit this line. DoclipseParser.java */
package com.beust.doclipsen.javacc;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
/**
* Defines a parser for the attribute grammar in order to
* determine what we are trying to complete on.  Can be
* either:
* - Tag name
* - attribute name
* - attribute value
*/
 /**
 * @author myking520
 *
 */
  public class DoclipseParser implements DoclipseParserConstants {
     public final static int completeOnTagName = 1;
     public final static int completeOnAttributeName = 2;
     public final static int completeOnAttributeValue = 4;
     public int  completeOn=completeOnTagName;
     public String fragment="";//Â∞ùËØïË°•ÂÖ®ÁöÑÂ≠óÁ¨?
     public String tagName;//tagÂêçÂ≠ó
     public final static Object defaultValue=new Object();//ÈªòËÆ§ÂÄ?
     public Map<String,Object> hasAttrs=new HashMap<String,Object>();//Â∑≤ÁªèÊ∑ªÂä†ÁöÑÂ±ûÊÄ?
          static public void main(String[] args)

        {
                testOnTag();
                testOnAttrName();
                try {
                        testOnAttrValue("@ej * aa=");
                        testOnAttrValue("@ej aa=\u005c"");
                                        testOnAttrValue("@ej aa=\u005c"aaa");
                                } catch (Exception e) {
                                        // TODO Auto-generated catch block
                                        e.printStackTrace();
                                }
        }

        private static void testOnTag() {
                String s = "@ej";
                StringReader sr = new StringReader(s);
                DoclipseParser parser = new DoclipseParser(sr);
                try {
                        parser.start();
                } catch (ParseException e) {
                }
                System.out.println(parser.fragment + "--" + parser.completeOn);
        }
        private static void testOnAttrName(){
                String s = "@ej aa";
                StringReader sr = new StringReader(s);
                DoclipseParser parser = new DoclipseParser(sr);
                try {
                        parser.start();
                } catch (ParseException e) {
                }
                System.out.println(parser.fragment + "--" + parser.completeOn);
        }
        private static void testOnAttrValue(String s){
                StringReader sr = new StringReader(s);
                DoclipseParser parser = new DoclipseParser(sr);
                try {
                        try {
                                                        parser.start();
                                                } catch (Exception e) {
                                                }
                } catch (Error e) {
                }
                System.out.println(parser.fragment + "--" + parser.completeOn);

        }

  final public void start() throws ParseException {
    tagName = tag();
fragment=tagName;
    completeOn=completeOnTagName;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      attr();
    }
  }

  final public String tag() throws ParseException {StringBuffer sb=new StringBuffer();
    jj_consume_token(TAG);
sb.append(token.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 10:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(10);
      jj_consume_token(IDENTIFIER);
sb.append(".").append(token.image);
    }
{if ("" != null) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void attr() throws ParseException {String attrName;
  String attrValue;
    attrName = attrName();
    jj_consume_token(11);
completeOn= completeOnAttributeValue ;
    hasAttrs.put(attrName,defaultValue);
    attrValue = attrValue();
hasAttrs.put(attrName,attrValue);
  }

  final public String attrName() throws ParseException {
    jj_consume_token(IDENTIFIER);
completeOn= completeOnAttributeName ;
   fragment=token.image;
   {if ("" != null) return fragment;}
    throw new Error("Missing return statement in function");
  }

  final public String attrValue() throws ParseException {
    jj_consume_token(STRING);
completeOn= completeOnAttributeName ;
   fragment="";
   {if ("" != null) return token.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public DoclipseParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x400,};
   }

  /** Constructor with InputStream. */
  public DoclipseParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DoclipseParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DoclipseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public DoclipseParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DoclipseParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public DoclipseParser(DoclipseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DoclipseParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

          }
